import { Guid } from "guid-typescript";
import { EntityManager, Entity } from "../entity";
import { ComponentManager } from "../component";
import { EntitySystemManager, EntitySystem } from "../system";
import { Manager } from "../manager";
export declare class ECSContext {
    private _entityMgr;
    private _componentMgr;
    private _entitySystemManager;
    private _managers;
    private _added;
    private _changed;
    private _deleted;
    private _enable;
    private _disable;
    private mAddedPerformer;
    private mChangedPerformer;
    private mDisabledPerformer;
    private mEnabledPerformer;
    private mDeletedPerformer;
    readonly entityManager: EntityManager;
    readonly componentManager: ComponentManager;
    readonly systemManager: EntitySystemManager;
    readonly systemIDs: Array<string>;
    constructor();
    createEntity(): Entity;
    getEntity(entityID: Guid): Entity;
    initialize(): void;
    addEntity(entity: Entity): void;
    changedEntity(entity: Entity): void;
    deleteEntity(entity: Entity): void;
    enable(entity: Entity): void;
    disable(entity: Entity): void;
    getSystem<SYS extends EntitySystem>(systemID: any): SYS;
    getSystems(): Array<EntitySystem>;
    setSystem(system: EntitySystem, passive?: boolean, ...after: string[]): EntitySystem;
    deleteSystem(system: EntitySystem): void;
    setManager(manager: Manager): Manager;
    getManager<MGR extends Manager>(managerID: string): MGR;
    deleteManager(manager: Manager): void;
    private notifySystems;
    private notifyManagers;
    private check;
    process(): void;
}
