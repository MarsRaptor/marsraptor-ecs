{"version":3,"file":"marsraptor-ecs.js","sources":["../src/component/Component.ts","../src/manager/Manager.ts","../src/component/ComponentManager.ts","../node_modules/guid-typescript/dist/guid.js","../src/entity/Entity.ts","../src/entity/EntityManager.ts","../src/util/structure/PrereqEntry.ts","../src/util/structure/PrereqMap.ts","../src/system/EntitySystemManager.ts","../src/context/ECSContext.ts","../src/system/EntitySystem.ts"],"sourcesContent":["export default abstract class Component {\r\n\r\n    readonly id: string;\r\n\r\n    constructor() {\r\n        this.id = this.constructor.name;\r\n    }\r\n\r\n}","import EntityObserver from \"../entity/EntityObserver\";\r\nimport ECSContext from \"../context/ECSContext\";\r\nimport Entity from \"../entity/Entity\";\r\n\r\nexport default abstract class Manager implements EntityObserver {\r\n\r\n    readonly id: string;\r\n    private _context!: ECSContext;\r\n\r\n    setContext<CTX extends ECSContext>(context: CTX) {\r\n        this._context = context;\r\n    }\r\n\r\n    getContext<CTX extends ECSContext>(): CTX {\r\n        return this._context as CTX;\r\n    }\r\n\r\n    constructor() {\r\n        this.id = this.constructor.name;\r\n    }\r\n\r\n    public initialize(): void{}   \r\n\r\n    public added(entity: Entity): void { }\r\n\r\n    public changed(entity: Entity): void { }\r\n\r\n    public deleted(entity: Entity): void { }\r\n\r\n    public enabled(entity: Entity): void { }\r\n\r\n    public disabled(entity: Entity): void { }\r\n\r\n}","import { Guid } from \"guid-typescript\";\r\n\r\nimport Component  from \"./Component\";\r\nimport Manager from \"../manager/Manager\";\r\nimport Entity from \"../entity/Entity\";\r\n\r\nexport default class ComponentManager extends Manager {\r\n\r\n    private _components!: Map<string, Map<Guid, Component>>;\r\n    private _deleted!: Set<Entity>;\r\n\r\n    public initialize(): void {\r\n        this._components = new Map<string, Map<Guid, Component>>();\r\n        this._deleted = new Set<Entity>();\r\n     }\r\n\r\n    public getComponentsByID<CMPNT extends Component>(componentID: string): Map<Guid, CMPNT> {\r\n        let components: Map<Guid, CMPNT> | undefined = this._components.get(componentID) as Map<Guid, CMPNT> | undefined;\r\n        if (components === undefined) {\r\n            components = new Map<Guid, CMPNT>();\r\n            this._components.set(componentID, components);\r\n        }\r\n        return components;\r\n    }\r\n\r\n    public getComponent<CMPNT extends Component> (entity: Entity, componentID: string): CMPNT | undefined {\r\n        let components: Map<Guid, Component> | undefined = this._components.get(componentID);\r\n        if (components !== undefined) {\r\n            return components.get(entity.id) as CMPNT | undefined;\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    public getComponentsFor(entity: Entity): Array<Component> {\r\n\r\n        let componentIDs: Set<string> = entity.componentIDs;\r\n        let componentSet = new Array<Component>();\r\n\r\n        componentIDs.forEach(componentID => {\r\n            let component: Component | undefined = this.getComponent(entity, componentID);\r\n            if (component) {\r\n                componentSet.push(component);\r\n            }\r\n        });\r\n\r\n        return componentSet;\r\n    }\r\n\r\n    public addComponent(entity: Entity,  component: Component): void {\r\n        entity.componentIDs.add(component.id);\r\n        this.getComponentsByID(component.id).set(entity.id, component);\r\n        this.getContext().changedEntity(entity);\r\n    }\r\n\r\n    public removeComponent(entity: Entity, componentID: string): void {\r\n        entity.componentIDs.delete(componentID);\r\n        this.getComponentsByID(componentID).delete(entity.id);\r\n        this.getContext().changedEntity(entity);\r\n\r\n    }\r\n\r\n    public removeComponentsOfEntity(entity: Entity): void {\r\n\r\n        let componentIDs: Set<string> = entity.componentIDs;\r\n\r\n        componentIDs.forEach(componentID => {\r\n            this.removeComponent(entity,componentID);\r\n        });\r\n\r\n        entity.componentIDs.clear();\r\n    }\r\n\r\n    public clean(): void {\r\n        if (this._deleted.size > 0) {\r\n\r\n            this._deleted.forEach(entity => {\r\n                this.removeComponentsOfEntity(entity);\r\n            });\r\n\r\n            this._deleted.clear();\r\n        }\r\n    }\r\n\r\n    public deleted(entity: Entity): void {\r\n        this._deleted.add(entity);\r\n    }\r\n\r\n}","\"use strict\";\r\nexports.__esModule = true;\r\nvar Guid = /** @class */ (function () {\r\n    function Guid(guid) {\r\n        if (!guid) {\r\n            throw new TypeError(\"Invalid argument; `value` has no value.\");\r\n        }\r\n        this.value = Guid.EMPTY;\r\n        if (guid && Guid.isGuid(guid)) {\r\n            this.value = guid;\r\n        }\r\n    }\r\n    Guid.isGuid = function (guid) {\r\n        var value = guid.toString();\r\n        return guid && (guid instanceof Guid || Guid.validator.test(value));\r\n    };\r\n    Guid.create = function () {\r\n        return new Guid([Guid.gen(2), Guid.gen(1), Guid.gen(1), Guid.gen(1), Guid.gen(3)].join(\"-\"));\r\n    };\r\n    Guid.createEmpty = function () {\r\n        return new Guid(\"emptyguid\");\r\n    };\r\n    Guid.parse = function (guid) {\r\n        return new Guid(guid);\r\n    };\r\n    Guid.raw = function () {\r\n        return [Guid.gen(2), Guid.gen(1), Guid.gen(1), Guid.gen(1), Guid.gen(3)].join(\"-\");\r\n    };\r\n    Guid.gen = function (count) {\r\n        var out = \"\";\r\n        for (var i = 0; i < count; i++) {\r\n            // tslint:disable-next-line:no-bitwise\r\n            out += (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);\r\n        }\r\n        return out;\r\n    };\r\n    Guid.prototype.equals = function (other) {\r\n        // Comparing string `value` against provided `guid` will auto-call\r\n        // toString on `guid` for comparison\r\n        return Guid.isGuid(other) && this.value === other.toString();\r\n    };\r\n    Guid.prototype.isEmpty = function () {\r\n        return this.value === Guid.EMPTY;\r\n    };\r\n    Guid.prototype.toString = function () {\r\n        return this.value;\r\n    };\r\n    Guid.prototype.toJSON = function () {\r\n        return {\r\n            value: this.value\r\n        };\r\n    };\r\n    Guid.validator = new RegExp(\"^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$\", \"i\");\r\n    Guid.EMPTY = \"00000000-0000-0000-0000-000000000000\";\r\n    return Guid;\r\n}());\r\nexports.Guid = Guid;\r\n","import { Guid } from \"guid-typescript\";\r\nimport ECSContext from \"../context/ECSContext\";\r\nimport Component from \"../component/Component\";\r\n\r\n\r\n\r\nexport default class Entity {\r\n\r\n    readonly id: Guid;\r\n    readonly componentIDs: Set<string>;\r\n    readonly systemIDs: Set<string>;\r\n\r\n    private _context!: ECSContext;\r\n\r\n    setContext<CTX extends ECSContext>(context: CTX) {\r\n        this._context = context;\r\n    }\r\n\r\n    getContext<CTX extends ECSContext>(): CTX {\r\n        return this._context as CTX;\r\n    }\r\n\r\n    get isActive() : boolean{\r\n        return this.getContext().entityMgr.isActive(this.id);\r\n    }\r\n\r\n    get isEnabled() : boolean{\r\n        return this.getContext().entityMgr.isEnabled(this.id);\r\n    }\r\n\r\n    constructor(context: ECSContext, id: Guid) {\r\n        this.id = id;\r\n        this._context = context;\r\n        this.componentIDs = new Set<string>();\r\n        this.systemIDs = new Set<string>();\r\n        this.reset();\r\n    }\r\n\r\n    public addComponent( component:Component) :Entity{\r\n        this.getContext().componentMgr.addComponent(this,component);\r\n\t\treturn this;\r\n    }\r\n\r\n    public getComponent<CMPNT extends Component>( componentID:string):CMPNT | undefined{\r\n        return this.getContext().componentMgr.getComponent(this,componentID);\r\n    }\r\n    \r\n    public getComponents():Array<Component>  {\r\n\t\treturn this.getContext().componentMgr.getComponentsFor(this);\r\n    }\r\n\r\n    public removeComponent(component:Component) :Entity{\r\n\t\treturn this.removeComponentByType(component.id);\r\n    }\r\n    \r\n    public removeComponentByType( componentID:string) {\r\n        this.getContext().componentMgr.removeComponent(this,componentID);\r\n\t\treturn this;\r\n    }\r\n\r\n    protected  reset() :void {\r\n\t\tthis.componentIDs.clear();\r\n\t\tthis.systemIDs.clear();\r\n    }\r\n}","import { Guid } from \"guid-typescript\";\r\nimport Manager from \"../manager/Manager\";\r\nimport Entity from \"./Entity\";\r\n\r\n\r\nexport default class EntityManager extends Manager {\r\n\r\n    private _entities!: Map<Guid, Entity>;\r\n    private _disabled!: Set<Guid>;\r\n\r\n    public initialize(): void {\r\n        this._entities = new Map<Guid, Entity>();\r\n        this._disabled = new Set<Guid>();\r\n    }\r\n\r\n    public createEntityInstance(): Entity {\r\n        let entity: Entity = new Entity(this.getContext(),Guid.create());\r\n        return entity;\r\n    }\r\n\r\n    public getEntity(entityID:Guid) :Entity | null {\r\n\t\treturn this._entities.get(entityID) || null;\r\n    }\r\n\r\n    public added(entity: Entity): void {\r\n        this._entities.set(entity.id, entity);\r\n    }\r\n\r\n    public enabled(entity: Entity): void {\r\n        this._disabled.delete(entity.id);\r\n    }\r\n\r\n    public disabled(entity: Entity): void {\r\n        this._disabled.add(entity.id);\r\n    }\r\n\r\n    public isActive(entityID:Guid) :boolean {\r\n\t\treturn this._entities.has(entityID);\r\n    }\r\n\r\n    public isEnabled(entityID:Guid) :boolean {\r\n\t\treturn !this._disabled.has(entityID);\r\n    }\r\n\r\n    public deleted(entity: Entity): void { \r\n        this._entities.delete(entity.id);\r\n        this._disabled.delete(entity.id);\r\n    }\r\n}","\r\nexport default class PrereqEntry<K,V>{\r\n    private _key:K;\r\n    private _value:V | null;\r\n    private _prerequisites:K[];\r\n\r\n    constructor(proto:{key:K,value?:V},after?:K[]) {\r\n        this._key = proto.key;\r\n        this._value = proto.value !== undefined ? proto.value : null;\r\n        this._prerequisites = after !== undefined && after !== null ? after : [];\r\n    }\r\n\r\n    get key() : K{\r\n        return this._key;\r\n    }\r\n\r\n    get value() :V | null{\r\n        return this._value;\r\n    }\r\n\r\n    set value(value:V |null) {\r\n        this._value = value;\r\n    }\r\n\r\n    get prerequisites() : K[]{\r\n        return this._prerequisites;\r\n    }\r\n\r\n    public compareTo(prereqItem:PrereqEntry<K,V>) : number{\r\n\r\n        if (this.prerequisites.indexOf(prereqItem.key) >= 0) {\r\n            return 1;\r\n        } else if (prereqItem.prerequisites.indexOf(this.key) >= 0){\r\n            return -1;\r\n        } else {\r\n            return 0;\r\n        }\r\n\r\n    }\r\n}","import PrereqEntry from \"./PrereqEntry\";\r\n\r\nexport default class PrereqMap<K, V>{\r\n\r\n    private _internalPrereqMap: Map<K, PrereqEntry<K, V>>;\r\n    private _orderedKeyList: K[] = [];\r\n    private _orderedValueList: V[] = [];\r\n\r\n    get size(): number {\r\n        return this._internalPrereqMap.size;\r\n    }\r\n\r\n    get keys(): K[] {\r\n        return this._orderedKeyList;\r\n    }\r\n\r\n    get values(): V[] {\r\n        return this._orderedValueList;\r\n    }\r\n\r\n    get map(): Map<K, V> {\r\n        let tempMap: Map<K, V> = new Map<K, V>();\r\n        for (let index = 0; index < this.keys.length; index++) {\r\n            const key = this.keys[index];\r\n            if (this.has(key)) {\r\n                tempMap.set(key, this.get(key) as V);\r\n            }\r\n        }\r\n        return tempMap;\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    constructor() {\r\n        this._internalPrereqMap = new Map<K, PrereqEntry<K, V>>();  \r\n        this.updateInternal()  \r\n    }\r\n\r\n    public clear(): void {\r\n        this._internalPrereqMap.clear();\r\n    }\r\n\r\n    public delete(key: K): boolean {\r\n        let superResult: boolean = this._internalPrereqMap.delete(key);\r\n        if (superResult) {\r\n            return this.updateInternal();\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public get(key: K): V | null {\r\n        if (this._internalPrereqMap.has(key)) {\r\n            return (this._internalPrereqMap.get(key) as PrereqEntry<K,V>).value as V | null;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public has(key: K): boolean {\r\n        return this._internalPrereqMap.has(key);\r\n    }\r\n\r\n    public set(key: K, value: V, after: K[]): PrereqMap<K, V> {\r\n        this._internalPrereqMap.set(key, new PrereqEntry({ key: key, value: value }, after));\r\n        this.updateInternal();\r\n        return this;\r\n    }\r\n\r\n    public entries() {\r\n        return this.map.entries();\r\n    }\r\n\r\n    public forEach(callbackfn: (value: V, key: K, map: Map<K, V>) => void, thisArg?: any) {\r\n        return this.map.forEach(callbackfn, thisArg);\r\n    }\r\n\r\n    private updateInternal(): boolean {  \r\n        \r\n        let tempInternalMap = new Map<K, PrereqEntry<K,V>>(Array.from(this._internalPrereqMap.entries()).sort(\r\n            (a,b) =>{\r\n                return a[1].compareTo(b[1]);\r\n            }\r\n        ));\r\n        this._internalPrereqMap = tempInternalMap;\r\n\r\n        this._orderedKeyList = Array.from(tempInternalMap.keys());\r\n        let tempMap:Map<K,V> = this.map;\r\n        this._orderedValueList = Array.from(tempMap.values());\r\n        return true;\r\n    }\r\n}","import Manager from \"../manager/Manager\";\r\nimport PrereqMap from \"../util/structure/PrereqMap\";\r\nimport EntitySystem from \"./EntitySystem\";\r\n\r\n\r\nexport default class EntitySystemManager extends Manager {\r\n\r\n    private _systemMap: PrereqMap<string, EntitySystem>;\r\n\r\n    constructor() {\r\n        super();\r\n        this._systemMap = new PrereqMap<string, EntitySystem>();\r\n    }\r\n\r\n    get systems(): PrereqMap<string, EntitySystem> {\r\n        return this._systemMap;\r\n    }\r\n\r\n    public initialize(): void {\r\n        this._systemMap.forEach(system => system.initialize());\r\n    }\r\n\r\n    public getSystem<SYS extends EntitySystem>(systemID: string): SYS {\r\n        return this._systemMap.get(systemID) as SYS;\r\n    }\r\n\r\n    public getSystems(): Array<EntitySystem> {\r\n        return this._systemMap.values;\r\n    }\r\n\r\n    public addSystem(system: EntitySystem, after?: string[]): void {\r\n        this._systemMap.set(system.id, system,after as string[]);\r\n    }\r\n\r\n    public removeSystem(systemID: string): void {\r\n        this._systemMap.delete(systemID);\r\n    }\r\n\r\n    public clearSystems(): void {\r\n        this._systemMap.clear();\r\n    }\r\n\r\n\r\n}","\r\nimport { Guid } from \"guid-typescript\";\r\nimport ComponentManager  from \"../component/ComponentManager\";\r\nimport EntityManager from \"../entity/EntityManager\";\r\nimport Manager from \"../manager/Manager\";\r\nimport EntitySystemManager from \"../system/EntitySystemManager\";\r\nimport Entity from \"../entity/Entity\";\r\nimport EntityObserver from \"../entity/EntityObserver\";\r\nimport EntitySystem from \"../system/EntitySystem\";\r\n\r\nexport default class ECSContext {\r\n\r\n    readonly entityMgr: EntityManager;\r\n    readonly componentMgr: ComponentManager;\r\n    readonly systemManager:EntitySystemManager;\r\n    readonly managers: Map<string,Manager> ;\r\n\r\n    private _added: Set<Entity>;\r\n    private _changed: Set<Entity>;\r\n    private _deleted: Set<Entity>;\r\n    private _enable: Set<Entity>;\r\n    private _disable: Set<Entity>;\r\n\r\n    private mAddedPerformer: Performer;\r\n    private mChangedPerformer: Performer;\r\n    private mDisabledPerformer: Performer;\r\n    private mEnabledPerformer: Performer;\r\n    private mDeletedPerformer: Performer;\r\n\r\n    constructor() {\r\n        this.managers = new Map<string,Manager>();\r\n\r\n        this._added = new Set<Entity>();\r\n        this._changed = new Set<Entity>();\r\n        this._deleted = new Set<Entity>();\r\n        this._enable = new Set<Entity>();\r\n        this._disable = new Set<Entity>();\r\n\r\n        this.componentMgr = new ComponentManager();\r\n        this.setManager(this.componentMgr);\r\n\r\n        this.entityMgr = new EntityManager();\r\n        this.setManager(this.entityMgr);\r\n\r\n        this.systemManager = new EntitySystemManager();\r\n        this.setManager(this.systemManager);\r\n\r\n        this.mAddedPerformer = {\r\n            perform(observer: EntityObserver, e: Entity): void {\r\n                observer.added(e);\r\n            }\r\n        };\r\n\r\n        this.mChangedPerformer = {\r\n            perform(observer: EntityObserver, e: Entity): void {\r\n                observer.changed(e);\r\n            }\r\n        };\r\n\r\n        this.mDisabledPerformer = {\r\n            perform(observer: EntityObserver, e: Entity): void {\r\n                observer.disabled(e);\r\n            }\r\n        };\r\n\r\n        this.mEnabledPerformer = {\r\n            perform(observer: EntityObserver, e: Entity): void {\r\n                observer.enabled(e);\r\n            }\r\n        };\r\n\r\n        this.mDeletedPerformer = {\r\n            perform(observer: EntityObserver, e: Entity): void {\r\n                observer.deleted(e);\r\n            }\r\n        };\r\n    }\r\n\r\n    public createEntity(): Entity {\r\n        return this.entityMgr.createEntityInstance();\r\n    }\r\n\r\n    public getEntity(entityID: Guid): Entity | null {\r\n        return this.entityMgr.getEntity(entityID);\r\n    }\r\n\r\n    public initialize(): void {\r\n        this.managers.forEach(manager=>manager.initialize());\r\n    }\r\n\r\n    public addEntity(entity: Entity): void {\r\n        this._added.add(entity);\r\n    }\r\n\r\n    public changedEntity(entity: Entity): void {\r\n        this._changed.add(entity);\r\n    }\r\n\r\n    public deleteEntity(entity: Entity): void {\r\n        this._deleted.add(entity);\r\n    }\r\n\r\n    public enable(entity: Entity): void {\r\n        this._enable.add(entity);\r\n    }\r\n\r\n    public disable(entity: Entity): void {\r\n        this._disable.add(entity);\r\n    }\r\n\r\n    public getSystem<SYS extends EntitySystem>(systemID:string): SYS {\r\n        return this.systemManager.getSystem(systemID);\r\n    }\r\n\r\n    public getSystems(): Array<EntitySystem> {\r\n        return this.systemManager.getSystems();\r\n    }\r\n\r\n    public setSystem(system: EntitySystem, passive: boolean =false,...after:string[]): EntitySystem {\r\n        system.setContext(this);\r\n        system.isPassive = passive;\r\n        this.systemManager.addSystem(system,after);\r\n        return system;\r\n    }\r\n\r\n    public deleteSystem(system: EntitySystem): void {\r\n        this.systemManager.removeSystem(system.id);\r\n    }\r\n\r\n    public setManager(manager: Manager): Manager {\r\n        this.managers.set(manager.id, manager);\r\n        manager.setContext(this);\r\n        return manager;\r\n    }\r\n\r\n    public getManager<MGR extends Manager>(managerID:string): MGR {\r\n        return this.managers.get(managerID) as MGR;\r\n    }\r\n\r\n    public deleteManager(manager: Manager): void {\r\n        this.managers.delete(manager.id);\r\n    }\r\n\r\n    private notifySystems(performer: Performer, entity: Entity): void {\r\n        this.systemManager.systems.forEach(system=>performer.perform(system,entity));        \r\n    }\r\n\r\n    private notifyManagers(performer: Performer, entity: Entity): void {\r\n        this.managers.forEach(manager=>performer.perform(manager,entity));        \r\n    }\r\n\r\n    private check(entities: Set<Entity>, performer: Performer): void {\r\n        if (entities.size>0) {\r\n            entities.forEach((entity)=>{\r\n                this.notifyManagers(performer, entity);\r\n                this.notifySystems(performer, entity);\r\n            },this)            \r\n            entities.clear();\r\n        }\r\n    }\r\n\r\n    public process(): void {\r\n\r\n        this.check(this._added, this.mAddedPerformer);\r\n        this.check(this._changed, this.mChangedPerformer);\r\n        this.check(this._disable, this.mDisabledPerformer);\r\n        this.check(this._enable, this.mEnabledPerformer);\r\n        this.check(this._deleted, this.mDeletedPerformer);\r\n\r\n        this.componentMgr.clean();\r\n\r\n        this.systemManager.systems.forEach(system => {\r\n            if (!system.isPassive) {\r\n                system.process();\r\n            }\r\n        },this);\r\n        \r\n    }\r\n\r\n}\r\n\r\ninterface Performer {\r\n    perform(observer: EntityObserver, entity: Entity): void;\r\n}","import EntityObserver from \"../entity/EntityObserver\";\r\nimport ECSContext from \"../context/ECSContext\";\r\nimport Entity from \"../entity/Entity\";\r\n\r\nexport default abstract class EntitySystem implements EntityObserver {\r\n\r\n    readonly id: string;\r\n    private _context!: ECSContext;\r\n    \r\n    private allSet: Set<string>;\r\n    private exclusionSet: Set<string>;\r\n    private oneSet: Set<string>;\r\n\r\n    private passive: boolean = false;\r\n\r\n    private _actives: Set<Entity>;\r\n\r\n    get isPassive(): boolean {\r\n        return this.passive;\r\n    }\r\n\r\n    set isPassive(passive: boolean) {\r\n        this.passive = passive;\r\n    }\r\n\r\n    get actives(): Set<Entity> {\r\n        return this.actives;\r\n    }\r\n\r\n    setContext<CTX extends ECSContext>(context: CTX) {\r\n        this._context = context;\r\n    }\r\n\r\n    getContext<CTX extends ECSContext>(): CTX {\r\n        return this._context as CTX;\r\n    }\r\n\r\n    constructor(aspect: { allOff?: Array<string>, noneOf?: Array<string>, oneOf?: Array<string> }) {\r\n        this.id = this.constructor.name;\r\n        this._actives = new Set<Entity>();\r\n        this.allSet = new Set<string>(aspect.allOff || []);\r\n        this.exclusionSet = new Set<string>(aspect.noneOf || []);\r\n        this.oneSet = new Set<string>(aspect.oneOf || []);\r\n    }\r\n\r\n    protected inserted(entity: Entity): void { };\r\n    protected removed(entity: Entity): void { };\r\n    protected abstract processEntities(entities: Set<Entity>): void;\r\n\r\n    protected checkProcessing(): boolean{\r\n        return true;\r\n    }\r\n\r\n    public initialize(): void {\r\n        // Nothing\r\n    }\r\n\r\n    public added(entity: Entity): void {\r\n        this.check(entity);\r\n    }\r\n\r\n    public changed(entity: Entity): void {\r\n        this.check(entity);\r\n    }\r\n\r\n    public deleted(entity: Entity): void {\r\n        if (entity.systemIDs.has(this.id)) {\r\n            this.removeFromSystem(entity);\r\n        }\r\n    }\r\n\r\n    public enabled(entity: Entity): void {\r\n        this.check(entity);\r\n    }\r\n\r\n    public disabled(entity: Entity): void {\r\n        if (entity.systemIDs.has(this.id)) {\r\n            this.removeFromSystem(entity);\r\n        }\r\n    }\r\n\r\n    private insertToSystem(entity: Entity): void {\r\n        this._actives.add(entity);\r\n        entity.systemIDs.add(this.id);\r\n        this.inserted(entity);\r\n    }\r\n\r\n    private removeFromSystem(entity: Entity): void {\r\n        this._actives.delete(entity);\r\n        entity.systemIDs.delete(this.id);\r\n        this.removed(entity);\r\n    }\r\n\r\n    public dispose(): void { }\r\n\r\n    public begin(): void { }\r\n\r\n    public process(): void {\r\n        if (this.checkProcessing()) {\r\n            this.begin();\r\n            this.processEntities(this._actives);\r\n            this.end();\r\n        }\r\n    }\r\n    public end(): void { }\r\n\r\n    protected check(entity: Entity): void {\r\n\r\n        let contains: boolean = entity.systemIDs.has(this.id);\r\n        let interested: boolean = true; // possibly interested, let's try to prove it wrong.\r\n\r\n        let componentIDs: Set<string> = entity.componentIDs;\r\n\r\n        // Check if the entity possesses ALL of the components defined in the aspect.\r\n        if (this.allSet.size > 0) {\r\n\r\n            for (const componentID of this.allSet) {\r\n                if (!componentIDs.has(componentID)) {\r\n                    interested = false;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        // Check if the entity possesses ANY of the exclusion components, if it does then the system is not interested.\r\n        if (this.exclusionSet.size > 0 && interested) {\r\n\r\n            for (const componentID of this.exclusionSet) {\r\n                if (componentIDs.has(componentID)) {\r\n                    interested = false;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        // Check if the entity possesses ANY of the components in the oneSet. If so, the system is interested.\r\n        if (this.oneSet.size > 0 && interested) {\r\n            interested = false;\r\n            for (const componentID of this.oneSet) {\r\n\r\n                if (componentIDs.has(componentID)) {\r\n                    interested = true;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (interested && !contains) {\r\n            this.insertToSystem(entity);\r\n        } else if (!interested && contains) {\r\n            this.removeFromSystem(entity);\r\n        }\r\n    }\r\n\r\n}"],"names":["[object Object]","this","id","constructor","name","context","_context","entity","Manager","_components","Map","_deleted","Set","componentID","components","get","undefined","set","componentIDs","componentSet","Array","forEach","component","getComponent","push","add","getComponentsByID","getContext","changedEntity","delete","removeComponent","clear","size","removeComponentsOfEntity","exports","Guid","guid","TypeError","value","EMPTY","isGuid","toString","validator","test","create","gen","join","createEmpty","parse","raw","count","out","i","Math","random","substring","prototype","equals","other","isEmpty","toJSON","RegExp","isActive","entityMgr","isEnabled","systemIDs","reset","componentMgr","addComponent","getComponentsFor","removeComponentByType","_entities","_disabled","Entity","entityID","has","proto","after","_key","key","_value","_prerequisites","prerequisites","prereqItem","indexOf","_internalPrereqMap","updateInternal","keys","_orderedKeyList","values","_orderedValueList","map","tempMap","index","length","PrereqEntry","entries","callbackfn","thisArg","tempInternalMap","from","sort","a","b","compareTo","super","_systemMap","PrereqMap","systems","system","initialize","systemID","managers","_added","_changed","_enable","_disable","ComponentManager","setManager","EntityManager","systemManager","EntitySystemManager","mAddedPerformer","observer","e","added","mChangedPerformer","changed","mDisabledPerformer","disabled","mEnabledPerformer","enabled","mDeletedPerformer","deleted","createEntityInstance","getEntity","manager","getSystem","getSystems","passive","setContext","isPassive","addSystem","removeSystem","managerID","performer","perform","entities","notifyManagers","notifySystems","check","clean","process","aspect","_actives","allSet","allOff","exclusionSet","noneOf","oneSet","oneOf","actives","removeFromSystem","inserted","removed","checkProcessing","begin","processEntities","end","contains","interested","insertToSystem"],"mappings":"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"}